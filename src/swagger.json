{
  "swagger": "2.0",
  "info": {
    "title": "Tasks API",
    "description": "Documentation API. https://github.com/danielschmitz/tasks-node-knex-swagger <br/><br/> <strong>In the production server, you MUST use <u>HTTPS</u> scheme </strong>",
    "version": "0.1",
    "contact": {
      "name": "Daniel Schmitz",
      "email": "danieljfa@gmail.com",
      "url": "https://github.com/danielschmitz"
    }
  },
  "basePath": "/api",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "scheme": "bearer",
      "in": "header"
    }
  },
  "paths": {
    "/hello-world": {
      "get": {
        "tags": [
          "Hello World"
        ],
        "summary": "A simple Hello World message",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/hello-world-with-error": {
      "get": {
        "tags": [
          "Hello World"
        ],
        "summary": "A simple Hello World message",
        "description": "",
        "responses": {
          "500": {
            "description": "hello world error"
          }
        }
      }
    },
    "/hello-world-test-joi": {
      "post": {
        "tags": [
          "Hello World"
        ],
        "summary": "Test joi validaton object",
        "description": "",
        "parameters": [
          {
            "name": "test",
            "in": "body",
            "description": "Simple Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Simple data"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data valid"
          },
          "400": {
            "description": "Data invalid"
          }
        }
      }
    },
    "/hello-world-json": {
      "get": {
        "tags": [
          "Hello World"
        ],
        "summary": "hello world returning a json object",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Try to login. If user.name is provided, it will be created",
        "description": "",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User Login Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "user1@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "123456"
                },
                "name": {
                  "type": "string",
                  "example": "user1"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Incorrect password"
          }
        }
      }
    },
    "/checkLogin": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "üîíÔ∏è Check login and return token info",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Token"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/checkAdmin": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "üîíÔ∏è Check login is admin and return token info",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Token"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "üîíÔ∏è Get all categories by logged user",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of categories"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "üîíÔ∏è Create a category by logged user",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "category",
            "in": "body",
            "description": "Category Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Category name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Category created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Invalid Input"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Category already exists"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "üîíÔ∏è Get a category by logged user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A category"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "üîíÔ∏è Update a category by logged user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "category",
            "in": "body",
            "description": "Category Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Category name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Category not found"
          },
          "409": {
            "description": "Category already exists"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "üîíÔ∏è Delete a category by logged user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Category deleted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Get undone tasks by logged user",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tasks"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Create a task by logged user",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "task",
            "in": "body",
            "description": "Task Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Task name"
                },
                "description": {
                  "type": "string",
                  "example": "Task description"
                },
                "category_id": {
                  "type": "string",
                  "example": "Category id"
                },
                "done": {
                  "type": "string",
                  "example": "Task is done"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Task created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Invalid Input"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Task already exists"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/tasks/done": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Get done tasks by logged user",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tasks"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/tasks/all": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Get all tasks by logged user",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tasks"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Get a task by logged user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A task"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Update a task by logged user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "task",
            "in": "body",
            "description": "Task Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Task name"
                },
                "description": {
                  "type": "string",
                  "example": "Task description"
                },
                "category_id": {
                  "type": "string",
                  "example": "Category id"
                },
                "done": {
                  "type": "string",
                  "example": "Task is done"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task updated"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Delete a task by logged user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Task deleted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/tasks/complete": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Complete a list of tasks by logged user (set done = true)",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "ids": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks updated"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/tasks/incomplete": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Mark as incomplete a list of tasks by logged user (set done = false)",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "ids": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks updated"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/tasks/complete/{id}": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Complete a task by logged user (set done = true)",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Task updated"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/tasks/incomplete/{id}": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "üîíÔ∏è Mark as incomplete a task by logged user (set done = false)",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Task updated"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Authorization header is required"
          }
        }
      }
    },
    "/edit": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "üîíÔ∏è Edit user name and email",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "user",
            "in": "body",
            "description": "User Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "newName"
                },
                "email": {
                  "type": "string",
                  "example": "newEmail@example.com"
                },
                "schema": {
                  "type": "string",
                  "example": "newSchema"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User updated successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "newName"
                    },
                    "email": {
                      "type": "string",
                      "example": "newEmail@example.com"
                    },
                    "schema": {
                      "type": "string",
                      "example": "newSchema"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid input or email already in use"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/changePass": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "üîíÔ∏è Change user password",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "passwords",
            "in": "body",
            "description": "Password Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "oldPassword": {
                  "type": "string",
                  "example": "oldPassword123"
                },
                "newPassword": {
                  "type": "string",
                  "example": "newPassword123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Password changed successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "userName"
                    },
                    "email": {
                      "type": "string",
                      "example": "userEmail@example.com"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid input or old password is incorrect"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "üîíÔ∏è Remove any user account (Admin only)",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "User id to be removed"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User removed successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User removed successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "userName"
                    },
                    "email": {
                      "type": "string",
                      "example": "userEmail@example.com"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}